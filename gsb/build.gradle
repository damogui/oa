apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'

ext.nettyVersion = '4.0.26.Final'
ext {
    if (System.properties['os.name'].contains("Windows")) {
        os = 'windows'
    } else {
        os = 'linux'
    }
    sysProperties = System.properties


    if (os == 'windows') {
        tomcat_home = tomcat_home_on_windows + tomcat_port
        extensionName = 'bat'
    } else {
        tomcat_home = tomcat_home_on_linux + tomcat_port
        extensionName = 'sh'
    }

    tomcat_bin = tomcat_home + '/bin'
    tomcat_start = tomcat_bin + '/startup.' + extensionName
    tomcat_stop = tomcat_bin + '/shutdown.' + extensionName
    tomcat_webapps = "${tomcat_home}" + "/webapps"

    ykx_maven_url="http://59.110.124.28:8081/nexus/content/groups/public/"
    if (env == 'test') {
        netsharpVersion = netsharp_version_test
    } else if(env == 'prod'){
        netsharpVersion = netsharp_version_prod
    }else{
        ykx_maven_url="http://59.110.124.28:8081/nexus/content/groups/public/"
        netsharpVersion = netsharp_version_dev
    }


    if (project_version =~ /-SNAPSHOT$/) {
        repository_url = "http://59.110.124.28:8081/nexus/content/repositories/snapshots/"
    } else {
        repository_url = "http://59.110.124.28:8081/nexus/content/repositories/releases/"
    }

    println '-----------------------------'
    println env
}

configure(subprojects.findAll { it.name != 'dao' }) {
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'maven'

    group 'org.netsharp'
    version project_version
    apply plugin: 'eclipse-wtp'
    println it.name

    tasks.withType(AbstractCompile) {
        options.encoding = "UTF-8"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ["src/test/resources"]
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            credentials {
                username 'admin'
                password 'gongsibao2015'
            }
            url "${ykx_maven_url}"
        }
    //    maven { url 'http://maven.oschina.net/content/groups/public/' }
        mavenCentral()
    }

	dependencies { compile("org.slf4j:slf4j-api:1.7.5")}
    if (it.name == 'netsharp-web') {

        apply plugin: 'war'

        dependencies {
            providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'

            providedCompile group: 'org.apache.tomcat', name: 'tomcat7-websocket', version: '7.0.55'
            providedCompile group: 'org.apache.tomcat', name: 'tomcat-coyote', version: '7.0.55'
            providedCompile group: 'org.apache.tomcat', name: 'tomcat-catalina', version: '7.0.55'
        }
        buildscript {
            repositories {
                jcenter()
            }

            dependencies {
                classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.3'
            }
        }
    }
    if (it.name == 'netsharp-core' || it.name == 'netsharp-basebiz' || it.name == 'netsharp-panda' || it.name == 'netsharp-basebiz-web') {
        configurations { providedCompile }

        dependencies {
            providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
        }

        sourceSets.main.compileClasspath += configurations.providedCompile
        sourceSets.test.compileClasspath += configurations.providedCompile
        sourceSets.test.runtimeClasspath += configurations.providedCompile

        eclipse {
            classpath {
                plusConfigurations += [configurations.providedCompile]
            }
        }
    }

    //------------------
    //打包源代码
    //------------------
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    //
    clean  {
        if (file('bin').exists()) {
            file('bin').deleteDir()
        }
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'UTF-8'//'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all', '-Xlint:-options']
        //onlyIf { JavaVersion.current().isJava8Compatible() }
        onlyIf { JavaVersion.current().isJava6Compatible() }
    }

    //上传到nexus
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "$repository_url") {
                    authentication(userName: "admin", password: "gongsibao2015")
                }
                pom.version = "$project.version"
                // pom.artifactId = "weixin-api"
                pom.groupId = "$project.group"
            }

        }
    }

//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                repository(url: "file://F:/myMavenRepo/")
//            }
//        }
//    }
}

clean  {
    if (file('out').exists()) {
        file('out').deleteDir()
    }

    if (file('.metadata').exists()) {
        file('.metadata').deleteDir()
    }

    if (file('RemoteSystemsTempFiles').exists()) {
        file('RemoteSystemsTempFiles').deleteDir()
    }

    if (file('build').exists()) {
        file('build').deleteDir()
    }
}


task callCommand(type: Exec) {
    commandLine 'tools/cl.' + extensionName

}

